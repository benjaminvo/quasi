//-------------------------------------------------------
//
//    Pintsize
//    Url: http://www.pintsize.io
//    Github: https://github.com/benjaminvo/pintsize
//    Original: https://github.com/alistairtweedie/Pintsize/
//
//-------------------------------------------------------


//-------------------------------------------------------
//    #grid config
//-------------------------------------------------------

// Number of columns
$columns: 12 !default;

//Width of a column in pixels
$column-width: 60px !default;

//Width of a gutter in pixels
$gutter-width: 40px !default;

//Fixed gutter width?
//False will generate a flexible gutter width.
$fixed-gutter-size: true !default;

//Small breakpoint to respond to
$sm: 20em;

//Medium breakpoint to respond to
$md: 40em;

//Large breakpoint to respond to
$lg: 60em;

//X-large breakpoint to respond to
$xl: 80em;


//-------------------------------------------------------
//    #grid calculations
//-------------------------------------------------------

// percentage function
@function percentage($size, $width) {
    @return $size / $width * 100%;
}

// calculate grid width
$grid-width: ($columns * $column-width) + (($columns) * $gutter-width);

// calculate column width
@function column($value) {
    $width: $value * $column-width + ($value) * $gutter-width;
    @return percentage($width, $grid-width);
}


//-------------------------------------------------------
//    #box-sizing mixin
//-------------------------------------------------------
@mixin box-sizing {
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}


//-------------------------------------------------------
//    #media query mixin
//-------------------------------------------------------
@mixin respond-to($point) {
    @media (min-width: $point) {
        @content;
    }
}


//-------------------------------------------------------
//    #gutter mixin
//    - If $fixed-gutter-size is set to true this will output
//    the $gutter-width as a fixed value and not percentage
//-------------------------------------------------------
@mixin gutter-output {

    @if $fixed-gutter-size == true {
        padding-left: $gutter-width / 2;
        padding-right: $gutter-width / 2;
    }

    @else {
        padding-left: percentage($gutter-width, $grid-width) / 2;
        padding-right: percentage($gutter-width, $grid-width) / 2;
    }
}


//-------------------------------------------------------
//    #The grid
//-------------------------------------------------------
.container {
    max-width: $grid-width; // Calculated from config
    margin: 0 auto;
    @include box-sizing;
}

// wrapper class for .col classes
.flex {
    display: flex;
    flex-flow: row wrap;
}


//-------------------------------------------------------
//    #flexbox helper classes
//    - docs for browser support to be provided
//-------------------------------------------------------
.flex-auto {
  .col {
        flex-grow: 1;
    }
}

.flex-start {
    justify-content: flex-start;

    .col {
        flex-grow: 0;
    }
}

.flex-center {
    justify-content: center;

    .col {
        flex-grow: 0;
    }
}

.flex-end {
    justify-content: flex-end;

    // defualt columns class required to be altered
    .col {
        flex-grow: 0;
    }
}

.flex-top {
    align-items: flex-start;
}

.flex-middle {
    align-items: center;
}

.flex-baseline {
    align-items: baseline;
}

.flex-wrap {
    flex-wrap: wrap;
}

.flex-row {
    flex-direction: row;
}

.flex-bottom {
    align-items: flex-end;

    .col {
        flex-grow: 1;
    }
}

.flex-around {
    justify-content: space-around;

    // defualt columns class required to be altered
    .col {
        flex-grow: 0;
        flex-shrink: 1;
    }

}

.flex-between {
    justify-content: space-between;

    // defualt columns class required to be altered
    .col {
        flex-grow: 0;
        flex-shrink: 1;
    }
}

.flex-reverse {
    flex-direction: row-reverse;
}


//-------------------------------------------------------
//    # The columns
//-------------------------------------------------------
.col {
    flex-grow: 0;
    flex-shrink: 0;
    flex-basis: auto;
    max-width: 100%;
    @include box-sizing;
    @include gutter-output;
}

.col-first {
    order: -1;
}

.col-last {
    order: 1;
}


//-------------------------------------------------------
//    # xs column

@for $i from 1 through $columns {
    .col-xs-#{$i} {
        flex-basis: column($i);
        max-width: column($i);
    }
}

@for $i from 1 through $columns {
    .offset-xs-#{$i} {
        margin-left: column($i);
    }
}

//-------------------------------------------------------
//    # sm column

@include respond-to($sm)  {

    @for $i from 1 through $columns {
        .col-sm-#{$i} {
            flex-basis: column($i);
            max-width: column($i);
        }
    }

    @for $i from 0 through $columns {
        .offset-sm-#{$i} {
            margin-left: column($i);
        }
    }

}


//-------------------------------------------------------
//    # md column

@include respond-to($md)  {

    @for $i from 1 through $columns {
        .col-md-#{$i} {
            flex-basis: column($i);
            max-width: column($i);
        }
    }

    @for $i from 0 through $columns {
        .offset-md-#{$i} {
            margin-left: column($i);
        }
    }

}


//-------------------------------------------------------
//    # lg column

@include respond-to($lg)  {

    @for $i from 1 through $columns {
        .col-lg-#{$i} {
            flex-basis: column($i);
            max-width: column($i);
        }
    }

    @for $i from 0 through $columns {
        .offset-lg-#{$i} {
            margin-left: column($i);
        }
    }

}

//-------------------------------------------------------
//    # xl column

@include respond-to($xl)  {

    @for $i from 1 through $columns {
        .col-xl-#{$i} {
            flex-basis: column($i);
            max-width: column($i);
        }
    }

    @for $i from 0 through $columns {
        .offset-xl-#{$i} {
            margin-left: column($i);
        }
    }

}
